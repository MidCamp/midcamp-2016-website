<?php
/**
 * @file
 * MidCamp profile install tasks.
 */

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 */
function midcamp_install() {
  $t = get_t();

  // Create and enable custom blocks.
  $bid = db_insert('block_custom')
    ->fields(array(
      'body' => "<p>March 17-20, 2016 at University of Illinois at Chicago (UIC)</p>",
      'info' => 'Date and venue',
      'format' => 'full_html'
    ))
    ->execute();
  db_insert('block')
    ->fields(array(
      'module',
      'delta',
      'theme',
      'status',
      'weight',
      'region',
      'custom',
      'visibility',
      'pages',
      'title',
      'cache'
    ))
    ->values(array(
      'block',
      $bid,
      'sitetheme',
      1,
      2,
      'header',
      0,
      0,
      '',
      '',
      -1
    ))
    ->execute();

  // Enable default and admin themes.
  $default_theme = 'sitetheme';
  $admin_theme = 'adminimal';

  // Disable the rest.
  db_update('system')
    ->fields(array('status' => 0))
    ->condition('type', 'theme')
    ->execute();

  // Enable $default_theme.
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', $default_theme)
    ->execute();

  // Enable $admin_theme.
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', $admin_theme)
    ->execute();
  variable_set('theme_default', $default_theme);
  variable_set('admin_theme', $admin_theme);

  $blocks = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -10,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'user-menu',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -10,
      'region' => 'header',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'panels_mini',
      'delta' => 'sponsor_footer_logos',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'footer',
      'pages' => '',
      'cache' => -1,
    ),
  );

  // Drop system / user blocks to ensure correct building.
  db_delete('block')->condition('module', 'system')->execute();
  db_delete('block')->condition('module', 'user')->execute();

  // Add in our blocks defined above.
  $query = db_insert('block')->fields(array(
    'module',
    'delta',
    'theme',
    'status',
    'weight',
    'region',
    'pages',
    'cache'
  ));

  foreach ($blocks as $block) {
    $query->values($block);
  }
  $query->execute();

  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 10;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

  // The midcamp_users module defines roles and permissions, and is enabled
  // here instead of as a dependency so we can guarantee the administrator role
  // as rid 3. The og feature modules are here because the install does not see
  // group reference field on the user at this point.
  $module_list = array(
    'midcamp_og_features_permission_node_sponsor',
    'midcamp_og_membership_type_og_membership_type_og_membership_type_default',
    'midcamp_eck_scamp',
    'midcamp_users'
  );
  if (!module_enable($module_list)) {
    drupal_set_message($t('Unable to enabled @modules', array(
      '@modules' => implode(',', $module_list),
    )), 'error');
  };

  // Ajaxify sponsor logos, so they are actually random!.
  midcamp_update_7002();

  // Adds sponsor_sidebar to block and configure.
  midcamp_update_7003();

  menu_rebuild();

  // Revert features to ensure they are all installed.
  features_revert();

  // Ignore any rebuild messages.
  node_access_needs_rebuild(FALSE);

  // Ignore any other install messages.
  drupal_get_messages();
}

/**
 * Ensure 'Platinum' is a field value for Sponsors.
 */
function midcamp_update_7001() {
  // Note for later: Should use allowed values function instead.
  features_rebuild(array(
    'midcamp_fields' => array(
      'field_base',
    )
  ));
}

/**
 * Enable AjaxBlocks and Ajaxify our footer sponsor logos.
 */
function midcamp_update_7002() {
  module_enable(array('ajaxblocks'));

  db_merge('ajaxblocks')
    ->key(array('block_id' => 'panels_mini-sponsor_footer_logos'))
    ->fields(array(
      'is_ajax' => 1,
      'loader_picture' => 8,
      'is_late' => 0,
      'delay' => 0,
      'include_noscript' => 1,
      'cached_roles' => 1,
      'uncached_roles' => '',
    ))
    ->execute();
  ajaxblocks_update_cache();
}

/**
 * Adds sponsor_sidebar mini panel to block config.
 */
function midcamp_update_7003() {
  // Add sponsor_sidebar to block config. Block Record has the potential to
  // already exist if ran as an update. During a fresh install the Block record
  // will not exist.
  $theme = 'sitetheme';
  $result = db_select('block', 'b')
    ->fields('b')
    ->condition('b.theme', $theme)
    ->condition('b.module', 'panels_mini')
    ->condition('b.delta', 'sponsor_sidebar')
    ->addTag('block_load')
    ->addTag('translatable')
    ->execute();
  $blocks = $result->fetchAllAssoc('bid');
  if (!empty($blocks)) {
    // Update the record. There will be only one.
    foreach ($blocks as $bid => $block) {
      if (!$block->status) {
        db_update('block')
          ->fields(array(
            'status' => 1,
            'weight' => 0,
            'region' => 'sidebar_second',
            'pages' => '',
            'cache' => 1,
          ))
          ->condition('bid', $bid)
          ->execute();
      }
    }
  }
  else {
    // Insert the record.
    db_insert('block')
      ->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'))
      ->values(array('panels_mini', 'sponsor_sidebar', $theme, 1, 0, 'sidebar_second', '', -1))
      ->execute();
  }

  db_insert('block_node_type')
    ->fields(array('module', 'delta', 'type'))
    ->values(array('panels_mini', 'sponsor_sidebar', 'sponsor'))
    ->execute();
}
