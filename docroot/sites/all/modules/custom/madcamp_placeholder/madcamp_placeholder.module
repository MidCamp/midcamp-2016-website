<?php
/**
 * @file
 * Replaces frontpage with MadCamp placeholder.
 */

define('MADCAMP_PLACEHOLDER_PATH', 'madcamp-placeholder');
define('MADCAMP_PLACEHOLDER_PREVIOUS_FRONTPAGE', 'madcamp_placeholder_previous_frontpage');

/**
 * Implements hook_menu().
 */
function madcamp_placeholder_menu() {
  $items[MADCAMP_PLACEHOLDER_PATH] = array(
    'title' => t('MadCamp 2015'),
    'description' => t('Placeholder for MadCamp 2015'),
    'type' => MENU_CALLBACK,
    'page callback' => 'madcamp_placeholder_page',
    'access callback' => TRUE,
    'delivery callback' => 'madcamp_placeholder_delivery',
  );
  return $items;
}

/**
 * Implements hook_element_info().
 */
function madcamp_placeholder_element_info() {
  $types['placeholder_page'] = array(
    '#show_messages' => TRUE,
    '#theme' => 'placeholder_page',
    '#theme_wrappers' => array('html'),
  );
  return $types;
}

/**
 * Implements hook_theme().
 */
function madcamp_placeholder_theme() {
  return array(
    'placeholder_page' => array(
      'render element' => 'element',
      'template' => 'theme/placeholder-page',
    ),
  );
}

/**
 * MadCamp placeholder page callback.
 * @return array
 */
function madcamp_placeholder_page() {

  $path = drupal_get_path('module', 'madcamp_placeholder');

  drupal_add_css("{$path}/theme/css/reset.css", array(
    'group' => CSS_THEME,
  ));
  drupal_add_css("{$path}/theme/css/style.css", array(
    'group' => CSS_THEME,
  ));

  $modernizr_path = "{$path}/theme/js";
  if (module_exists('libraries')) {
    $library_path = libraries_get_path('modernizr');
    if (file_exists($library_path)) {
      $modernizr_path = $library_path;
    }
  }
  // load modernizr in head so html5 shiv loads before body, and to prevent fouc
  drupal_add_js(
    "{$modernizr_path}/modernizr.min.js",
    array(
      'type' => 'file',
      'scope' => 'header',
      'group' => JS_LIBRARY - 10,
    )
  );

  drupal_add_js("{$path}/theme/js/main.js");

  return array(
    '#theme' => 'image',
    '#path' => "{$path}/theme/img/midcamp2016splash.png",
    '#alt' => t('MadCamp 2016 teaser sticker'),
  );
}

/**
 * Delivery callback function that does not assume type of 'page'.
 * Basically used to avoid the user of drupal_exit.
 * @param $page_callback_result
 */
function madcamp_placeholder_delivery($page_callback_result) {
  // Menu status constants are integers; page content is a string or array.
  if (is_int($page_callback_result)) {
    // one way ticket to html page
    drupal_deliver_html_page($page_callback_result);
  }

  if (isset($page_callback_result) && is_null(drupal_get_http_header('Content-Type'))) {
    drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
  }

  // Send appropriate HTTP-Header for browsers and search engines.
  global $language;
  drupal_add_http_header('Content-Language', $language->language);

  // Viewport
  drupal_add_html_head(array(
    '#tag' => 'meta',
    '#attributes' => array(
      'name' => 'viewport',
      'content' => 'width=device-width, initial-scale=1',
    ),
  ), 'viewport');

  if (isset($page_callback_result)) {
    $page = $page_callback_result;
    $main_content_display = &drupal_static('system_main_content_added', FALSE);

    // Allow menu callbacks to return strings or arbitrary arrays to render.
    // If the array returned is not of #type page directly, we need to fill
    // in the page with defaults.
    if (is_string($page) || (is_array($page) && (!isset($page['#type']) || ($page['#type'] != 'page')))) {
      drupal_set_page_content($page);
      $page = element_info('placeholder_page');
    }

    // If no module has taken care of the main content, add it to the page now.
    // This allows the site to still be usable even if no modules that
    // control page regions (for example, the Block module) are enabled.
    if (!$main_content_display) {
      $page['content']['system_main'] = drupal_set_page_content();
    }

    print drupal_render($page);
  }

  // Perform end-of-request tasks.
  drupal_page_footer();
}

/**
 * Implements hook_enable().
 */
function madcamp_placeholder_enable() {
  // save current site_frontpage
  variable_set(MADCAMP_PLACEHOLDER_PREVIOUS_FRONTPAGE, variable_get('site_frontpage', 'node'));

  // this is a somewhat ugly way to make sure jquery update is 1.7 or greater
  // but I want to just enable this module and be good and not have to do anything else
  // besides, this is just a temporary module
  if (module_exists('jquery_update')) {
    $version = variable_get('jquery_update_jquery_version');
    if ($version == '1.5') {
      variable_set('jquery_update_jquery_version', '1.7');
    }
  }

  // set site_frontpage to placeholder
  variable_set('site_frontpage', MADCAMP_PLACEHOLDER_PATH);
  $frontpage_link = l('MadCamp placeholder', '<front>');
  drupal_set_message("Site front page is now showing the {$frontpage_link}. Disable module to revert site front page.");
}

/**
 * Implements hook_disable().
 */
function madcamp_placeholder_disable() {
  $site_frontpage = variable_get(MADCAMP_PLACEHOLDER_PREVIOUS_FRONTPAGE, 'node');
  if (drupal_valid_path($site_frontpage)) {
    variable_set('site_frontpage', $site_frontpage);
  }
  else {
    variable_set('site_frontpage', 'node');
  }
}

/**
 * Implements hook_uninstall().
 */
function madcamp_placeholder_uninstall() {
  variable_del(MADCAMP_PLACEHOLDER_PREVIOUS_FRONTPAGE);
}
