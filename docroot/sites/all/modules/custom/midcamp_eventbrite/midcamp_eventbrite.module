<?php

/**
 * @file
 * Contains module file for Eventbrite integration for MidCamp.
 */

define('EVENTBRITE_API_ENDPOINT', 'https://www.eventbriteapi.com/v3');

/**
 * Implements hook_ctools_plugin_directory().
 */
function midcamp_eventbrite_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
  return NULL;
}

function midcamp_eventbrite_get_attendees($page = NULL, DateTime $changed_since = NULL) {
  $params = array(
    'expand' => 'order',
  );

  if ($changed_since) {
    $params['changed_since'] = $changed_since->format(DateTime::ISO8601);
  }

  if ($page) {
    $params['page'] = $page;
  }

  $data = EventbriteApi::request('GET', '/events/' . variable_get('midcamp_eventbrite_event_id') . '/attendees', $params);

  return $data;
}

function midcamp_eventbrite_process_attendees(DateTime $last_run = NULL) {
  $response = midcamp_eventbrite_get_attendees(NULL, $last_run);
  $attendees = $response['attendees'];
  if (!empty($attendees) && isset($response['pagination'])) {
    for ($i = 1; $i <= $response['pagination']['page_count']; $i++) {
      $paginated_attendees = midcamp_eventbrite_get_attendees($i, $last_run);
      $attendees = array_merge($attendees, $paginated_attendees['attendees']);
    }
  }

  if (empty($attendees)) {
    return;
  }

  foreach ($attendees as $attendee) {
    $user = user_load_by_mail($attendee['profile']['email']);
    if (empty($user)) {
      // Attempt to load from account field.
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'user')
        ->fieldCondition('field_eventbrite_email', 'value', $attendee['profile']['email']);
      $results = $query->execute();
      if (!empty($results)) {
        $user = reset($results['user']);
      }
    }

    $query = db_merge('eventbrite_ticket')
      ->key(array(
        'attendee_id' => $attendee['id'],
        'order_id' => $attendee['order_id'],
        'ticket_class_id' => $attendee['ticket_class_id'],
      ))
      ->fields(array(
        'uid' => $user->uid,
        'email' => $attendee['profile']['email'],
        'attendee_id' => $attendee['id'],
        'order_id' => $attendee['order_id'],
        'ticket_class_id' => $attendee['ticket_class_id'],
        'order_url' => 'https://www.eventbrite.com/mytickets/' . $attendee['order_id'],
        'created' => strtotime($attendee['created']),
        'changed' => strtotime($attendee['changed']),
      ));
    $result = $query->execute();

    drupal_set_message(t('Update Eventbrite Ticket: @attendee:@order:@class', array(
      '@attendee' => $attendee['id'],
      '@order' => $attendee['order_id'],
      '@class' => $attendee['ticket_class_id'],
    )));
  }
}

/**
 * Implements hook_cron().
 */
function midcamp_eventbrite_cron() {
  // Eventbrite says UTC; We get current time, as we'll save this as our last
  // run, so we don't miss any in case this is a long process.
  $now = new DateTime('now', new DateTimeZone('UTC'));

  // Get last run. Send it.
  $last_run = variable_get('midcamp_eventbrite_attendees_last_process', NULL);
  midcamp_eventbrite_process_attendees($last_run);

  // Save last run DateTime object.
  variable_set('midcamp_eventbrite_attendees_last_process', $now);
}

/**
 * Implements hook_views_data().
 */
function midcamp_eventbrite_views_data() {
  // Basic table information.
  $data['eventbrite_ticket']['table']['group'] = t('Eventbrite Ticket');
  // Advertise this table as a possible base table
  $data['eventbrite_ticket']['table']['base'] = array(
    'field' => 'ticket_id',
    'title' => t('Eventbrite tickets'),
    'help' => t('Listings of Eventbrite tickets.'),
    'weight' => 10,
  );
  $data['eventbrite_ticket']['rid'] = array(
    'title' => t('Ticket ID'),
    'help' => t('The internal ID of the ticker.'),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
      'allow empty' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
  );
  $data['users']['table']['join']['eventbrite_ticket'] = array(
    'left_field' => 'uid',
    'field' => 'uid',
  );
  $data['eventbrite_ticket']['uid'] = array(
    'title' => t('User ID'),
    'help' => t('ID of user who created the URL redirect.'),
    'field' => array(
      'handler' => 'views_handler_field_user',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_user_uid',
      'name field' => 'name',
    ),
    'filter' => array(
      'title' => t('Name'),
      'handler' => 'views_handler_filter_user_name',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'relationship' => array(
      'handler' => 'views_handler_relationship',
      'base' => 'users',
      'base field' => 'uid',
      'label' => t('user'),
    ),
  );
  $data['eventbrite_ticket']['mail'] = array(
    'title' => t('E-mail'), // The item it appears as on the UI,
    'help' => t('Email address for user.'),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
  );
  $data['eventbrite_ticket']['attendee_id'] = array(
    'title' => t('Attendee ID'),
    'help' => '',

    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $data['eventbrite_ticket']['order_id'] = array(
    'title' => t('Order Id'),
    'help' => '',

    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $data['eventbrite_ticket']['ticket_class_id'] = array(
    'title' => t('Ticket Class ID'),
    'help' => '',
    // @todo custom handler for mapping display.
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  // created field
  $data['eventbrite_ticket']['created'] = array(
    'title' => t('Post date'), // The item it appears as on the UI,
    'help' => t('The date the content was posted.'), // The help that appears on the UI,
    'field' => array(
      'handler' => 'views_handler_field_date',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_date',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_date',
    ),
  );

  // changed field
  $data['eventbrite_ticket']['changed'] = array(
    'title' => t('Updated date'), // The item it appears as on the UI,
    'help' => t('The date the content was last updated.'), // The help that appears on the UI,
    'field' => array(
      'handler' => 'views_handler_field_date',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_date',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_date',
    ),
  );

  return $data;
}